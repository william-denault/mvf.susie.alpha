library(testthat)
library(ashr)
library(wavethresh)
library(mixsqp)
library(susiF.alpha)
set.seed(1)
f1 <- simu_IBSS_per_level(lev_res=7, alpha=1, prop_decay =1.5)
# f1$true_coef effect is on wavelet coeff at scale 1 and 50 of coeff scale 2
plot(f1$sim_func, type="l", ylab="y")
set.seed(9)
f2 <- simu_IBSS_per_level(lev_res=6, alpha=0, prop_decay =1.5 )
# f2$true_coef effect is on wavelet coeff at scale 1 and 50 of coeff scale 2
plot(f2$sim_func, type="l", ylab="y")
N=50
P=10

nullweight= 0
set.seed(23)
G = matrix(sample(c(0, 1,2), size=N*P, replace=T), nrow=N, ncol=P) #Genotype
beta0       <- 0
beta1       <- 1
pos1 <- 5
noisy.data  <- list()

low_wc=NULL
G = matrix(sample(c(0, 1,2), size=N*P, replace=T), nrow=N, ncol=P) #Genotype
beta1       <- 1
backfit=TRUE
greedy =TRUE
control_mixsqp=list(verbose=FALSE)

noisy.data  <- list()
rsnr <- 6
for ( i in 1:N)
{
  f1_obs <- f1$sim_func
  f2_obs <- f2$sim_func
  Y0     <-  G[i,pos1]   +rnorm(1,sd=1)
  Y1     <- t(beta1*G[i,pos1]*f1_obs +  rnorm(length(f1$sim_func), sd=  (1/  rsnr ) *sd(f1$sim_func)))
  Y2     <- t(beta1*G[i,pos1]*f2_obs +  rnorm(length(f2$sim_func), sd=  (1/  rsnr ) *sd(f2$sim_func)))
  Y3     <- c(-1,1) *G[i, pos1]  + c(rnorm(2,sd=1))
  noisy.data [[i]] <- list(Y0,Y1,Y2,Y3)
}

X <- G

noisy.data[[1]]
noisy.data[[2]]
list_dfs  <- list()
for ( k in 1:length(noisy.data[[1]]))
{
  list_dfs [[k]]     <- do.call(rbind, lapply(noisy.data, `[[`, k))
}




plot(list_dfs[[2]][1,], type = "l", ylim = c(min(list_dfs[[2]]), max(list_dfs[[2]])))
for (i  in 2:N){
  
  lines(list_dfs[[2]][i,] , col=(G[i, pos1]+1))
}
plot(list_dfs[[3]][1,], type = "l", ylim = c(min(list_dfs[[3]]), max(list_dfs[[3]])))
for (i  in 2:N){
  
  lines(list_dfs[[3]][i,] , col=(G[i, pos1]+1))
}


type_mark <-  is.functional(list_dfs)

 

list_wdfs <- list()
list_indx_lst  <-  list()
if( "functional" %!in% type_mark$mark_type)
{
  Y_f <- NULL
}else{
  h <- 1
  for ( k in which(type_mark$mark_type=="functional"))
  {
    temp               <- DWT2(list_dfs[[k]])
    list_wdfs[[h]]     <- cbind( temp$D,temp$C)
    list_indx_lst[[h]] <- gen_wavelet_indx( log2(ncol(  list_wdfs[[h]]) ))
    h <- h+1
  }
  Y_f <- list_wdfs
  v1  <- nrow( Y_f [[1]])
}
if("univariate" %!in% type_mark$mark_type)
{
  Y_u <- NULL
}else{
  Y_u <- do.call( cbind, list_dfs [ which(type_mark$mark_type=="univariate") ])
  v1  <- nrow(Y_u)
}

Y_data   <- list(Y_u =Y_u,
                 Y_f =Y_f)



X <- susiF.alpha:::colScale(X)
# centering input
Y_data <- multi_array_colScale(Y_data, scale=FALSE)


threshs <- create_null_thresh(type_mark = type_mark)
low_trait <- check_low_count  (Y_data, thresh_lowcount=threshs  )


numCores <- parallel::detectCores()

G_prior <- init_prior_multfsusie( Y=Y_data ,
                                  X=X,
                                  v1=v1,
                                  list_indx_lst=list_indx_lst,
                                  low_trait= low_trait,
                                  control_mixsqp=control_mixsqp,
                                  nullweight=  nullweight, 
                                  parallel = TRUE
)$G_prior
 
L=3
multfsusie.obj <- init_multfsusie_obj(L_max = 3, G_prior, Y_data,X , type_mark,
                                      L_start =   3,
                                      greedy = greedy, backfit=backfit)
 
 

update_Y <-Y_data
effect_estimate   <- cal_Bhat_Shat_multfsusie(update_Y,X,v1)

