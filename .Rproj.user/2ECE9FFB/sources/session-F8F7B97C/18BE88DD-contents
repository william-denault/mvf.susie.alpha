rm(list=ls())

library(mvf.susie.alpha)
set.seed(1)

N <- 100 #Sample size
P= 100 # number of SNP
L <- 2 #Number of effect
print(L)
list_lev_res <- list(5,6) # two functional phenotypes ,
#one of length 2^5, and one of length 2^6)
n_univ <- 3 #3 univariate phenotypes
eff <-  list()
for(l in 1:L){ #Simulate the mult-trait effect
  eff[[l]] <-   simu_effect_multfsusie (list_lev_res=list_lev_res,
                                        n_univ=n_univ, output_level = 2)
}


Y_f1 <-  matrix(rnorm((2^list_lev_res[[1]])*N ,sd=1), nrow = N)
Y_f2 <-  matrix(rnorm((2^list_lev_res[[2]])*N ,sd=1), nrow = N)

Y_u <- matrix(rnorm((n_univ)*N ,sd=1), nrow = N)


G = matrix(rpois(N*P, lambda = 2), nrow=N, ncol=P) #Genotype


true_pos <- sample( 1:ncol(G), L)# actually causal column/SNP

for ( i in 1:N){
  for ( l in 1:L){
    
    Y_f1[i,]<- Y_f1[i,]+eff[[l]]$func_effect[[1]]$sim_func*G[i,true_pos[[l]]]
    Y_f2[i,]<- Y_f2[i,]+eff[[l]]$func_effect[[2]]$sim_func*G[i,true_pos[[l]]]
    Y_u[i,]<- Y_u[i,]+ eff[[l]]$univ_effect*G[i,true_pos[[l]]]
  }
}

Y_f <- list()
Y_f[[1]] <- Y_f1
Y_f[[2]] <- Y_f2
Y <- list( Y_f = Y_f, Y_u=Y_u) # preparing data ,
#current ouput type expect list of two which element named
#Y_f for functional trait and Y_u for univariate trait

 

##thresholding some trait

#create object for trhesholding some trait for a user specified value thresholding

threshs <- threshold_set_up( thresh_u= rep(1e-3,3), thresh_f = c(1e-3, 1e-3))
Y$Y_f[[1]][1 ,] <-NA
m1 <- multfsusie(Y=Y,
                 X=G,
                 L=11 ,
                 data.format="list_df",
                 L_start=11,
                 thresh_lowcount=threshs,
                 maxit=10)



